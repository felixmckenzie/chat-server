// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  clerkId          String?         @unique
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  username         String
  email            String          @unique
  avatar           String?
  isOnline         Boolean?
  channels         Channel[]
  messages         Message[]
  ownedContacts    Contact[]       @relation("ContactOwner")
  connectedContacts Contact[]       @relation("ContactConnection")
  sentRequests     FriendRequest[] @relation("FriendRequestSender")
  receivedRequests FriendRequest[] @relation("FriendRequestReceiver")
}

enum Role {
  ADMIN
  REGULAR
}

model Contact {
  id             Int    @id @default(autoincrement())
  owner           User   @relation("ContactOwner",fields: [ownerClerkId], references: [clerkId])
  ownerClerkId    String 
  connectedUser    User   @relation("ContactConnection",fields: [connectionClerkId], references: [clerkId])
  connectionClerkId String 
  @@unique([ownerClerkId, connectionClerkId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model FriendRequest {
  id              Int                 @id @default(autoincrement())
  status          FriendRequestStatus
  sender          User                @relation("FriendRequestSender", fields: [senderClerkId], references: [clerkId])
  senderClerkId   String
  receiver        User                @relation("FriendRequestReceiver", fields: [receiverClerkId], references: [clerkId])
  receiverClerkId String

  @@unique([senderClerkId, receiverClerkId])
}

model Channel {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  isGroupChat Boolean
  messages    Message[]
  members     User[]
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  sender    User     @relation(fields: [userId], references: [id])
  userId    Int
  channel   Channel  @relation(fields: [chatId], references: [id])
  chatId    Int
}
