type Query {
  hello: String
}

input UserRegisterInput {
  username: String
  email: String
  avatar: String
  clerkId: String
}

input CreateChannelInput {
  name: String
  userIds: [Int!]!
}

input UserInput {
  id: Int!
  email: String!
}

type User {
  id: Int!
  clerkId: String!
  createdAt: DateTime
  updatedAt: DateTime
  email: String!
  avatar: String
  username: String!
  isOnline: Boolean
  channels: [Channel]
  messages: [Message]
  friends: [User]
  friendOf: [User]
  sentRequests: [FriendRequest]
  receivedRequests: [FriendRequest]
}

type FriendRequest {
  id: Int!
  sender: User!
  receiver: User!
  status: FriendRequestStatus!
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Role {
  ADMIN
  REGULAR
}

type Channel {
  id: Int!
  name: String!
  members: [User!]!
  messages: [Message!]!
  isGroupChat: Boolean!
}

type Message {
  id: Int!
  text: String!
  sender: User!
  channel: Channel
  timestamp: DateTime!
}

type Query {
  getChannel(id: Int!): Channel
  getUser(clerkId: String!): User
  getAllUserChannels(userInput: UserInput!): [Channel!]!
  friendRequestsSentByUser(clerkId: String!): [FriendRequest]
  friendRequestsReceivedByUser(clerkId: String!): [FriendRequest]
  messages(channelId: Int!): [Message!]!
}

type Mutation {
  createChannel(input: CreateChannelInput!): Channel!
  addUsersToChannel(chatId: Int!, userIds: [Int!]!): Channel!
  removeUsersFromChannel(channelId: Int!, userIds: [Int!]!): Channel!
  createMessage(text: String!, senderId: Int!, channelId: Int!): Message!
  createUser(input: UserRegisterInput!): User!
  sendFriendRequest(clerkId: String!, contactUserEmail: String!): FriendRequest!
  respondToFriendRequest(requestId: Int!, status: FriendRequestStatus!): FriendRequest!
  setUserOnlineStatus(clerkId: String!, isOnline: Boolean!): User!
}

type Subscription {
  messageSent(channelId: Int!): Message!
  userOnlineStatusChanged: User!
}

scalar DateTime
