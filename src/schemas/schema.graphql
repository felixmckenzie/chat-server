type Query {
  hello: String
}

input UserRegisterInput {
  username: String
  about: String
  email: String
  isActive: Boolean
  avatar: String
  role: Role
  clerkId: String
}

input CreateChannelInput {
  name: String
  userIds: [Int!]!
}

input UserInput {
  id: Int!
  email: String!
}

type User {
  id: Int!
  clerkId: String!
  createdAt: DateTime
  updatedAt: DateTime
  email: String!
  avatar: String
  about: String
  username: String!
  role: Role!
  isActive: Boolean!
  channels: [Channel!]!
  contacts: [Contact!]!
  messages: [Message!]!
}

type Contact {
  id: Int!
  user: User!
  contactUser: User!
}

enum Role {
  ADMIN
  REGULAR
}

type Channel {
  id: Int!
  name: String!
  members: [User!]!
  messages: [Message!]!
  isGroupChat: Boolean!
}

type Message {
  id: Int!
  text: String!
  sender: User!
  channel: Channel
  timestamp: DateTime!
}

type Query {
  getChannel(id: Int!): Channel
  getUser(clerkId: String!): User
  getAllUserChannels(userInput: UserInput!): [Channel!]!
  messages(channelId: Int!): [Message!]!
}

type Mutation {
  createChannel(input: CreateChannelInput!): Channel!
  addUsersToChannel(chatId: Int!, userIds: [Int!]!): Channel!
  removeUsersFromChannel(channelId: Int!, userIds: [Int!]!): Channel!
  createMessage(text: String!, senderId: Int!, channelId: Int!): Message!
  createUser(input: UserRegisterInput!): User!
  addContact(userId: Int!, contactUserEmail: String!): Contact!
}

type Subscription {
  messageSent(channelId: Int!): Message!
}

scalar DateTime
