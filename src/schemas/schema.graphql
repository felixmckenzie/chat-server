input UserWithAddressInput {
  givenName: String
  familyName: String
  email: String
  mobilePhone: String
  role: Role
  address: AddressInput
}

input AddressInput {
  address_line_one: String
  address_line_two: String
  city: String
  state: String
  postCode: String
}

type User {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  email: String!
  mobilePhone: String!
  givenName: String!
  familyName: String!
  address: Address
  role: Role!
  chats: [Chat!]!
}

enum Role {
  ADMIN
  REGULAR
}

type Address {
  id: ID!
  address_line_one: String!
  address_line_two: String
  city: String!
  postCode: String!
  State: String!
}

type Chat {
  id: ID!
  name: String!
  users: [User!]!
  messages: [Message!]!
  isGroupChat: Boolean!
}

type Message {
  id: ID!
  text: String!
  sender: User!
  chat: Chat!
  timestamp: DateTime!
}

type Query {
  getChat(id: ID!): Chat
  getUser(id: ID!): User
  messages(chatId: ID!): [Message!]!
}

type Mutation {
  createChat(name: String!, userIds: [ID!]!, isGroupChat: Boolean!): Chat!
  addUsersToChat(chatId: ID!, userIds: [ID!]!): Chat!
  removeUsersFromChat(chatId: ID!, userIds: [ID!]!): Chat!
  createMessage(text: String!, senderId: ID!, chatId: ID!): Message!
}

type Subscription {
  messageSent(chatId: ID!): Message!
}

scalar DateTime
